__author__ = 'pavang'
__Date___ = ''

import os
import shutil


class QoUtil(object):
    """
    This class is for quickoffice utilities which are generic and can be used
    for other modules also.
    """
    # global LOGGER

    def count_char(self, char, string):
        """
        This method will count the occurrence of a given character in
        argument str
    Args:
        char: Character for which frequency need to be counted
        str: Source string
    Return:
        Frequency of character
        """
        count = 0
        for charecter in string:
            if charecter == char:
                count += 1
        return count

    def get_time_format(self, minute, sec, millisec, split_char=':'):
        """
        Convert given parameters into standard time
        format(i.e. min:sec:millisec)
    Args:
        min: Minutes
        sec: Seconds
        millisec: MilliSeconds
        split_char: separator for time elements
        """
        formated_time = str(minute).rjust(2, '0') + \
                        split_char + str(sec).rjust(2, '0') + \
                        split_char + str(millisec).rjust(3, '0')
        return formated_time

    def open_file(self, file_name, mode):
        """
            a wrapper to open function with exception handling
    Args:
        fileName: Name of file to be opened
        mode: Mode(like r,w,a) in which file will be opened
        """
        try:
            data = open(file_name, mode)
            return data
        except IOError as err:
            print('File error', str(err))
            data.close()

    def remove_all_files(self, dir_path, rm_dir_tree=False):
        """
        remove all files in given directory path
        Note: this method will not delete nested directories
        """
        if rm_dir_tree == True:
            shutil.rmtree(dir_path)
        else:
            file_list = [flst for flst in os.listdir(dir_path)]
            for flst in file_list:
                file_path = os.path.join(dir_path, flst)
                if os.path.isfile(file_path):
                    os.remove(file_path)

    def write_dict_to_csv(self, dictionary, dict_first_key,
                          dict_last_key, file_path):
        """
        Write a dictionary in csv file
    Args:
        dict: dictionary which need to be written csv file
        file_path: target csv file which would be generated by this method
        """

        with open(file_path, 'w') as fl_obj:
        # Below code is to keep <b> File Name </b> key on the top of CSV File
            try:
                fl_obj.write(dict_first_key)
                fl_obj.write(str(dictionary.pop(dict_first_key)))
                fl_obj.write('\n')

                lst = list(dictionary.keys())
                # key is used for sorting list by file extension
                lst.sort(key=lambda lst: (os.path.splitext(lst)[1],
                                          os.path.splitext(lst)[0]))
                #print lst

                for k in lst:
                    if k == dict_last_key:
                        continue
                    fl_obj.write(k)
                    fl_obj.write(dictionary[k])
                    fl_obj.write('\n')

                fl_obj.write(dict_last_key)
                fl_obj.write(str(dictionary[dict_last_key]))
            except KeyError as key:
                LOGGER.exception("Key {0} does not exist in dictionary"
                .format(str(key)))
        fl_obj.close()

    def execute_py(self, no_of_iteration, csv_generator,
                   source_csv_file_path, csv_generator_args,
                   output_csv_files_dir):
        """
        This will execute c2c python code

        """
        for i in range(no_of_iteration):
            call(["/usr/bin/python", csv_generator, csv_generator_args,
                  'BLESSED'])
            #os.system(cmd)
            tcsv = output_csv_files_dir + '/run0' + str(i + 1) + '.csv'
            # Calling mv command of unix to move csv file
            call('mv -f {0} {1}'.format(source_csv_file_path, tcsv), shell=True)

    def print_dict(self, dict_data, separator=':'):
        """
            print given dictionary and put separator between key and value
            while printing
        """
        for key, value in dict_data.items():
            print str(key) + separator + '   ' + str(value)

    # def remove_keys(self, lst, dictionary):
    #     """
    #         Remove all keys based on given list
    #     """
    #     for item in lst:
    #         dictionary.pop(item, None)

    def is_dict_empty(self, dictionary):
        """
        checks whether given dictionary is empty or not
        """
        isempty = not (dictionary and True) or False
        return isempty

    def list_from_dict_value(self, dict_data, value):
        """
            returns list of keys by value.
        """
        lst = []
        for key, value in dict_data.items():
            if value == value:
                lst.append(key)
        return lst

if __name__ == '__main__':
        d = {}
        qo = QoUtil()
        print(qo.is_dict_empty(d))